
import React, { useState } from 'react';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Badge } from '@/components/ui/badge';
import { Variable, Plus, X, Clock, Hash, TrendingUp, Tag } from 'lucide-react';

interface Variable {
  name: string;
  value: string;
  description: string;
  isAutoGenerated: boolean;
}

interface VariablesDialogProps {
  onSave: (variables: Variable[]) => void;
}

const VariablesDialog = ({ onSave }: VariablesDialogProps) => {
  const [isOpen, setIsOpen] = useState(false);
  const [newVarName, setNewVarName] = useState('');
  const [newVarValue, setNewVarValue] = useState('');
  const [variables, setVariables] = useState<Variable[]>([
    { name: 'ClOrdID', value: 'AUTO', description: '', isAutoGenerated: true },
    { name: 'Symbol', value: 'AAPL', description: 'Trading Symbol', isAutoGenerated: false },
    { name: 'Price', value: '150.00', description: 'Order Price', isAutoGenerated: false },
    { name: 'Timestamp', value: 'AUTO', description: '', isAutoGenerated: true }
  ]);

  const addQuickVariable = (name: string, value: string) => {
    const newVar: Variable = {
      name,
      value,
      description: '',
      isAutoGenerated: value === 'AUTO'
    };
    setVariables([...variables, newVar]);
  };

  const addCustomVariable = () => {
    if (newVarName && newVarValue) {
      const newVar: Variable = {
        name: newVarName,
        value: newVarValue,
        description: '',
        isAutoGenerated: newVarValue === 'AUTO'
      };
      setVariables([...variables, newVar]);
      setNewVarName('');
      setNewVarValue('');
    }
  };

  const removeVariable = (index: number) => {
    setVariables(variables.filter((_, i) => i !== index));
  };

  const handleSave = () => {
    onSave(variables);
    setIsOpen(false);
  };

  return (
    <Dialog open={isOpen} onOpenChange={setIsOpen}>
      <DialogTrigger asChild>
        <Button variant="outline" size="sm" className="gap-2 bg-slate-700 ">
          <Variable className="w-4 h-4" />
          FIX Variables
        </Button>
      </DialogTrigger>
      <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            <Variable className="w-5 h-5" />
            FIX Variables
          </DialogTitle>
        </DialogHeader>
        
        <div className="space-y-6">
          <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
            <h3 className="font-semibold text-blue-800 mb-2">Variables Usage:</h3>
            <div className="text-sm text-blue-700 space-y-1">
              <div>• Use <code className="bg-blue-100 px-1 rounded">{'{VariableName}'}</code> in FIX messages to substitute values</div>
              <div>• <Badge variant="secondary" className="bg-green-100 text-green-800">AUTO</Badge> values are automatically generated by the system</div>
              <div>• ClOrdID with AUTO will create unique order IDs (ORD000001, ORD000002, etc.)</div>
              <div>• Changes are automatically sent to the backend when saved</div>
            </div>
          </div>

          <div>
            <h3 className="font-medium mb-3">Quick Add Common Variables:</h3>
            <div className="flex flex-wrap gap-2">
              <Button 
                variant="outline" 
                size="sm"
                onClick={() => addQuickVariable('Timestamp', 'AUTO')}
                className="gap-2"
              >
                <Clock className="w-4 h-4" />
                + Timestamp (AUTO)
              </Button>
              <Button 
                variant="outline" 
                size="sm"
                onClick={() => addQuickVariable('OrderQty', '100')}
                className="gap-2"
              >
                <Hash className="w-4 h-4" />
                + OrderQty
              </Button>
              <Button 
                variant="outline" 
                size="sm"
                onClick={() => addQuickVariable('Side', 'Buy')}
                className="gap-2"
              >
                <TrendingUp className="w-4 h-4" />
                + Side (Buy)
              </Button>
              <Button 
                variant="outline" 
                size="sm"
                onClick={() => addQuickVariable('OrdType', 'Limit')}
                className="gap-2"
              >
                <Tag className="w-4 h-4" />
                + OrdType (Limit)
              </Button>
            </div>
          </div>

          <div>
            <h3 className="font-medium mb-3">Add Custom Variable:</h3>
            <div className="flex gap-2">
              <Input
                placeholder="Variable Name (e.g., Symbol)"
                value={newVarName}
                onChange={(e) => setNewVarName(e.target.value)}
                className="flex-1"
              />
              <Input
                placeholder="Variable Value (e.g., AAPL or AUTO)"
                value={newVarValue}
                onChange={(e) => setNewVarValue(e.target.value)}
                className="flex-1"
              />
              <Button onClick={addCustomVariable} className="gap-2">
                <Plus className="w-4 h-4" />
                Add
              </Button>
            </div>
          </div>

          <div>
            <div className="grid grid-cols-4 gap-4 p-3 bg-gray-50 rounded-t-lg font-medium text-sm">
              <div>Name</div>
              <div>Value</div>
              <div>Description</div>
              <div>Actions</div>
            </div>
            <div className="border border-t-0 rounded-b-lg">
              {variables.map((variable, index) => (
                <div key={index} className="grid grid-cols-4 gap-4 p-3 border-b last:border-b-0 items-center">
                  <div className="font-mono text-sm">{variable.name}</div>
                  <div className="flex items-center gap-2">
                    {variable.isAutoGenerated ? (
                      <Badge variant="secondary" className="bg-green-100 text-green-800 text-xs">
                        AUTO GENERATED
                      </Badge>
                    ) : (
                      <code className="bg-gray-100 px-2 py-1 rounded text-sm">{variable.value}</code>
                    )}
                  </div>
                  <div className="text-sm text-gray-600">{variable.description}</div>
                  <div>
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={() => removeVariable(index)}
                      className="text-red-600 hover:text-red-700 hover:bg-red-50"
                    >
                      <X className="w-4 h-4" />
                    </Button>
                  </div>
                </div>
              ))}
            </div>
          </div>

          <div className="flex justify-end gap-2 pt-4 border-t">
            <Button variant="outline" onClick={() => setIsOpen(false)}>
              Cancel
            </Button>
            <Button onClick={handleSave} className="bg-blue-600 hover:bg-blue-700">
              Save & Update Backend
            </Button>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  );
};

export default VariablesDialog;
